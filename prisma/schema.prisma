generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String?             @unique
  phone              String?             @unique
  password           String
  role               String
  isAdvanced         Boolean             @default(false)

  // ‚úÖ ÏàòÏ†ïÎêú SNS ÎßÅÌÅ¨ ÌïÑÎìú
  socialLinks        Json?

  // ‚úÖ ÌååÏùº ÏóÖÎ°úÎìú Í¥ÄÎ†® ÌïÑÎìú Ï∂îÍ∞Ä
  businessLicense    String?
  bankBook           String?
  commerceCertificate String?
  idCard             String?

  // Í∏∞Ï°¥ Í¥ÄÍ≥Ñ Î∞è Î©îÌÉÄ ÌïÑÎìú
  products           Product[]           @relation("VendorProducts")
  promotionLinks     PromotionLink[]
  influencerProducts InfluencerProduct[]
  commissions        Commission[]
  withdrawals        Withdrawal[]
  orders             Order[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}


model Product {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String
  price              Int
  category           String?
  rewardRate         Float               @default(0)
  shippingCountries  String[]
  vendor             User                @relation("VendorProducts", fields: [vendorId], references: [id])
  vendorId           Int
  externalId  String? @unique  // üëà Ïô∏Î∂Ä Ïó∞ÎèôÏö© ID
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  influencerProducts InfluencerProduct[]
  orderItems         OrderItem[]
  promotionLinks     PromotionLink[]
}

model PromotionLink {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  code      String   @unique
  createdAt DateTime @default(now())
  clicks    Click[]
}

model Click {
  id              Int           @id @default(autoincrement())
  promotionLink   PromotionLink @relation(fields: [promotionLinkId], references: [id])
  promotionLinkId Int
  ip              String
  userAgent       String
  createdAt       DateTime      @default(now())
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int?
  totalAmount Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model OrderItem {
  id         Int         @id @default(autoincrement())
  order      Order       @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product     @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  price      Int
  commission Commission?
}

model Commission {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId Int       @unique
  amount      Int
  createdAt   DateTime  @default(now())
}

model Withdrawal {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  amount      Int
  status      String    @default("pending")
  requestedAt DateTime  @default(now())
  processedAt DateTime?
}

model InfluencerProduct {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  originalProduct Product  @relation(fields: [productId], references: [id])
  productId       Int
  title           String
  description     String
  price           Int
  imageUrl        String
  createdAt       DateTime @default(now())
}
