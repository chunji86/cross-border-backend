generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String?             @unique
  password            String
  role                String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  bankBook            String?
  businessLicense     String?
  commerceCertificate String?
  idCard              String?
  isAdvanced          Boolean             @default(false)
  phone               String?             @unique
  socialLinks         Json?
  Commission          Commission[]
  influencerProducts  InfluencerProduct[]
  orders              Order[]
  Product             Product[]
  promotionLinks      PromotionLink[]
  withdrawals         Withdrawal[]
}

model Product {
  id                 Int                 @id @default(autoincrement())
  description        String
  price              Int
  rewardRate         Float               @default(0)
  vendorId           Int
  createdAt          DateTime            @default(now())
  name               String
  updatedAt          DateTime            @updatedAt
  category           String?
  shippingCountries  String[]
  influencerProducts InfluencerProduct[]
  orderItems         OrderItem[]
  User               User                @relation(fields: [vendorId], references: [id])
  promotionLinks     PromotionLink[]
}

model Influencer {
  id          String  @id @default(cuid())
  email       String  @unique
  password    String  // bcrypt hash
  name        String?
  mallId      String?
  shopNo      String?
  code        String? @unique // 추천코드(rc)와 연결 (있으면)
  createdAt   DateTime @default(now())
}

model PromotionLink {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  code      String   @unique
  createdAt DateTime @default(now())
  Click     Click[]
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Withdrawal {
  id          Int       @id @default(autoincrement())
  userId      Int
  amount      Int
  status      String    @default("pending")
  requestedAt DateTime  @default(now())
  processedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  userId      Int?
  totalAmount Int
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  influencerId   Int?      // 🔸 rc 매칭 저장 필드 (없으면 추가)
   rc         String?  // ✅ 인플루언서 코드 저장
}

model OrderItem {
  id         Int         @id @default(autoincrement())
  orderId    Int
  productId  Int
  price      Int
  quantity   Int
  Commission Commission?
  order      Order       @relation(fields: [orderId], references: [id])
  product    Product     @relation(fields: [productId], references: [id])
}

model Click {
  id              Int           @id @default(autoincrement())
  promotionLinkId Int
  ip              String
  userAgent       String
  createdAt       DateTime      @default(now())
  PromotionLink   PromotionLink @relation(fields: [promotionLinkId], references: [id])
}

model Commission {
  id          Int       @id @default(autoincrement())
  userId      Int
  orderItemId Int       @unique
  amount      Int
  createdAt   DateTime  @default(now())
  OrderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
}

model RcAttribution {
  id         String   @id @default(cuid())
  mallId     String
  shopNo     String
  cid        String        // raccoon_cid (고객 브라우저 식별)
  rc         String?       // 인플루언서 코드
  event      String        // 'view' | 'checkout' | 'order_result'
  url        String?
  referrer   String?
  orderNoHint String?      // 위젯이 추정한 주문번호(있으면)
  ip         String?
  userAgent  String?
  matched    Boolean  @default(false) // 주문과 매칭 완료 여부
  createdAt  DateTime @default(now())

  @@index([mallId, shopNo, cid, createdAt])
  @@index([mallId, createdAt])
}
