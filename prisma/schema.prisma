generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String?             @unique
  password            String
  role                String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  bankBook            String?
  businessLicense     String?
  commerceCertificate String?
  idCard              String?
  isAdvanced          Boolean             @default(false)
  phone               String?             @unique
  socialLinks         Json?
  Commission          Commission[]
  influencerProducts  InfluencerProduct[]
  orders              Order[]
  Product             Product[]
  promotionLinks      PromotionLink[]
  withdrawals         Withdrawal[]
}

model Product {
  id                 Int                 @id @default(autoincrement())
  description        String
  price              Int
  rewardRate         Float               @default(0)
  vendorId           Int
  createdAt          DateTime            @default(now())
  name               String
  updatedAt          DateTime            @updatedAt
  category           String?
  shippingCountries  String[]
  influencerProducts InfluencerProduct[]
  orderItems         OrderItem[]
  User               User                @relation(fields: [vendorId], references: [id])
  promotionLinks     PromotionLink[]
}

model InfluencerProduct {
  id          Int      @id @default(autoincrement())
  productId   Int
  title       String
  description String
  imageUrl    String
  price       Int
  createdAt   DateTime @default(now())
  userId      Int
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model PromotionLink {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  code      String   @unique
  createdAt DateTime @default(now())
  Click     Click[]
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Withdrawal {
  id          Int       @id @default(autoincrement())
  userId      Int
  amount      Int
  status      String    @default("pending")
  requestedAt DateTime  @default(now())
  processedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  userId      Int?
  totalAmount Int
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id         Int         @id @default(autoincrement())
  orderId    Int
  productId  Int
  price      Int
  quantity   Int
  Commission Commission?
  order      Order       @relation(fields: [orderId], references: [id])
  product    Product     @relation(fields: [productId], references: [id])
}

model Click {
  id              Int           @id @default(autoincrement())
  promotionLinkId Int
  ip              String
  userAgent       String
  createdAt       DateTime      @default(now())
  PromotionLink   PromotionLink @relation(fields: [promotionLinkId], references: [id])
}

model Commission {
  id          Int       @id @default(autoincrement())
  userId      Int
  orderItemId Int       @unique
  amount      Int
  createdAt   DateTime  @default(now())
  OrderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
}
